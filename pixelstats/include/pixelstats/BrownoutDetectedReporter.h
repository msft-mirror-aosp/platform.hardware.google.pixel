/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef HARDWARE_GOOGLE_PIXEL_PIXELSTATS_BROWNOUTDETECTEDREPORTER_H
#define HARDWARE_GOOGLE_PIXEL_PIXELSTATS_BROWNOUTDETECTEDREPORTER_H

#include <aidl/android/frameworks/stats/IStats.h>
#include <hardware/google/pixel/pixelstats/pixelatoms.pb.h>

#include <map>
#include <regex>
#include <string>

namespace android {
namespace hardware {
namespace google {
namespace pixel {

using aidl::android::frameworks::stats::IStats;
using aidl::android::frameworks::stats::VendorAtomValue;

#define ODPM_MAX_IDX 24
#define DVFS_MAX_IDX 6

/*
 * CsvIdx dictates the indexing of how data aligns with lastmeal.csv.
 * lastmeal.csv is generated by battery_mitigation upon brownout detection.
 * The new data added here are the additional data captured by
 * battery_mitigation during the generation of lastmeal.csv.
 * filed b/335498252 to make this portion be passed from gs-common.
 */
enum CsvIdx {
    TIMESTAMP_IDX,
    IRQ_IDX,
    SOC_IDX,
    TEMP_IDX,
    CYCLE_IDX,
    VOLTAGE_IDX,
    CURRENT_IDX,
    DVFS_CHANNEL_0 = 7,
    ODPM_CHANNEL_0 = DVFS_CHANNEL_0 + DVFS_MAX_IDX,      /* 13 */
    MITIGATION_METHOD_0 = ODPM_CHANNEL_0 + ODPM_MAX_IDX, /* 37 */
    MITIGATION_METHOD_0_COUNT,
    MITIGATION_METHOD_0_TIME,
    EVT_CNT_IDX_OILO1,
    EVT_CNT_IDX_OILO2,
    EVT_CNT_IDX_UVLO1,
    EVT_CNT_IDX_UVLO2,
    MAX_CURR,
    IDX_VIMON_V,
    IDX_VIMON_I,
    PRE_OCP_CPU1_BCKUP_IDX,
    PRE_OCP_CPU2_BCKUP_IDX,
    PRE_OCP_TPU_BCKUP_IDX,
    PRE_OCP_GPU_BCKUP_IDX,
    PRE_UVLO_HIT_CNT_M_IDX,
    PRE_UVLO_HIT_CNT_S_IDX,
    UVLO_DUR_IDX,
    ODPM_IRQ_STAT_0_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_1_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_2_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_3_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_4_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_5_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_6_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_7_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_8_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_9_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_10_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_11_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_0_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_1_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_2_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_3_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_4_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_5_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_6_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_7_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_8_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_9_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_10_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_11_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_EXT_0_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_EXT_1_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_EXT_2_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_EXT_3_SYS_EVT_MAIN_BCKUP_IDX,
    ODPM_IRQ_STAT_EXT_0_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_EXT_1_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_EXT_2_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_EXT_3_SYS_EVT_SUB_BCKUP_IDX,
    ODPM_IRQ_STAT_GPU_BCKUP_IDX,
    ODPM_IRQ_STAT_TPU_BCKUP_IDX,
    ODPM_IRQ_STAT_CPU1_BCKUP_IDX,
    ODPM_IRQ_STAT_CPU2_BCKUP_IDX,
};

enum Irq {
    SMPL_WARN,
    OCP_WARN_CPUCL1,
    OCP_WARN_CPUCL2,
    SOFT_OCP_WARN_CPUCL1,
    SOFT_OCP_WARN_CPUCL2,
    OCP_WARN_TPU,
    SOFT_OCP_WARN_TPU,
    OCP_WARN_GPU,
    SOFT_OCP_WARN_GPU,
    PMIC_SOC,
    UVLO1,
    UVLO2,
    BATOILO,
    BATOILO2,
    PMIC_120C,
    PMIC_140C,
    PMIC_OVERHEAT,
};

enum Update { kUpdateMax, kUpdateMin };

/**
 * A class to upload Pixel Brownout metrics
 */
class BrownoutDetectedReporter {
  public:
    void logBrownout(const std::shared_ptr<IStats> &stats_client, const std::string &logFilePath,
                     const std::string &brownoutReasonProp);
    void logBrownoutCsv(const std::shared_ptr<IStats> &stats_client, const std::string &logFilePath,
                        const std::string &brownoutReasonProp);
    int brownoutReasonCheck(const std::string &brownoutReasonProp);

  private:
    struct BrownoutDetectedInfo {
        int triggered_irq_;
        long triggered_timestamp_;
        int battery_temp_;
        int battery_cycle_;
        int battery_soc_;
        int voltage_now_;
        int odpm_value_[ODPM_MAX_IDX];
        int dvfs_value_[DVFS_MAX_IDX];
        int brownout_reason_;
        int mitigation_method_0_;
        int mitigation_method_0_count_;
        unsigned long long mitigation_method_0_time_us_;
        int max_curr_;
        int evt_cnt_uvlo1_;
        int evt_cnt_uvlo2_;
        int evt_cnt_oilo1_;
        int evt_cnt_oilo2_;
        int vimon_vbatt_;
        int vimon_ibatt_;
        int pre_ocp_cpu1_bckup_;
        int pre_ocp_cpu2_bckup_;
        int pre_ocp_tpu_bckup_;
        int pre_ocp_gpu_bckup_;
        int pre_uvlo_hit_cnt_m_;
        int pre_uvlo_hit_cnt_s_;
        int uvlo_dur_;
        int odpm_irq_stat_0_sys_evt_main_bckup_;
        int odpm_irq_stat_1_sys_evt_main_bckup_;
        int odpm_irq_stat_2_sys_evt_main_bckup_;
        int odpm_irq_stat_3_sys_evt_main_bckup_;
        int odpm_irq_stat_4_sys_evt_main_bckup_;
        int odpm_irq_stat_5_sys_evt_main_bckup_;
        int odpm_irq_stat_6_sys_evt_main_bckup_;
        int odpm_irq_stat_7_sys_evt_main_bckup_;
        int odpm_irq_stat_8_sys_evt_main_bckup_;
        int odpm_irq_stat_9_sys_evt_main_bckup_;
        int odpm_irq_stat_10_sys_evt_main_bckup_;
        int odpm_irq_stat_11_sys_evt_main_bckup_;
        int odpm_irq_stat_0_sys_evt_sub_bckup_;
        int odpm_irq_stat_1_sys_evt_sub_bckup_;
        int odpm_irq_stat_2_sys_evt_sub_bckup_;
        int odpm_irq_stat_3_sys_evt_sub_bckup_;
        int odpm_irq_stat_4_sys_evt_sub_bckup_;
        int odpm_irq_stat_5_sys_evt_sub_bckup_;
        int odpm_irq_stat_6_sys_evt_sub_bckup_;
        int odpm_irq_stat_7_sys_evt_sub_bckup_;
        int odpm_irq_stat_8_sys_evt_sub_bckup_;
        int odpm_irq_stat_9_sys_evt_sub_bckup_;
        int odpm_irq_stat_10_sys_evt_sub_bckup_;
        int odpm_irq_stat_11_sys_evt_sub_bckup_;
        int odpm_irq_stat_ext_0_sys_evt_main_bckup_;
        int odpm_irq_stat_ext_1_sys_evt_main_bckup_;
        int odpm_irq_stat_ext_2_sys_evt_main_bckup_;
        int odpm_irq_stat_ext_3_sys_evt_main_bckup_;
        int odpm_irq_stat_ext_0_sys_evt_sub_bckup_;
        int odpm_irq_stat_ext_1_sys_evt_sub_bckup_;
        int odpm_irq_stat_ext_2_sys_evt_sub_bckup_;
        int odpm_irq_stat_ext_3_sys_evt_sub_bckup_;
        int odpm_irq_stat_gpu_bckup_;
        int odpm_irq_stat_tpu_bckup_;
        int odpm_irq_stat_cpu1_bckup_;
        int odpm_irq_stat_cpu2_bckup_;
    };

    void setAtomFieldValue(std::vector<VendorAtomValue> &values, int offset, int content);
    long parseTimestamp(std::string timestamp);
    bool updateIfFound(std::string line, std::regex pattern, int *current_value, Update flag);
    void uploadData(const std::shared_ptr<IStats> &stats_client,
                    const struct BrownoutDetectedInfo max_value);
    // Proto messages are 1-indexed and VendorAtom field numbers start at 2, so
    // store everything in the values array at the index of the field number
    // -2.
    const int kVendorAtomOffset = 2;
};

}  // namespace pixel
}  // namespace google
}  // namespace hardware
}  // namespace android

#endif  // HARDWARE_GOOGLE_PIXEL_PIXELSTATS_BROWNOUTDETECTEDREPORTER_H
